package kr.or.ddit.case10.conf;

import static org.junit.jupiter.api.Assertions.*;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.sql.DataSource;

import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;

import jakarta.annotation.Resource;
import jakarta.inject.Inject;
import kr.or.ddit.vo.MbtiVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@SpringJUnitConfig(classes = Case10JdbcConfig.class)
class Case10JdbcConfigTest {
	
	@Inject
	JdbcTemplate jdbcTemplate;
	
	@Resource(name="npjt")
	NamedParameterJdbcTemplate npjt;
	
	
	@Test
	void testInsert() {
		MbtiVO newMbti = new MbtiVO();
		newMbti.setMtType("885");
		newMbti.setMtTitle("2121234123");
		newMbti.setMtContent("ㅁ잳러재댱댡어먖ㄷ어맺ㄹㄷ");
		
		StringBuffer sql = new StringBuffer();
		sql.append("INSERT INTO TB_MBTIDESC(    ");
		sql.append("	MT_TYPE     ");
		sql.append("	, MT_TITLE  ");
		sql.append("	, MT_CONTENT");
		sql.append(") VALUES(       ");
		sql.append("   :mtType, :mtTitle,  :mtContent      ");
		sql.append(")               ");
		
		int rowcnt = npjt.update(sql.toString(), new BeanPropertySqlParameterSource(newMbti));
		
		
//		int rowcnt = jdbcTemplate.update(sql.toString()
//				, newMbti.getMtType()
//				, newMbti.getMtTitle()
//				, newMbti.getMtContent());
		
		
	}
	
	@Test
	@Disabled
	void testMultiColumn() {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT MT_TYPE, MT_TITLE, MT_CONTENT ");
		sql.append("FROM TB_MBTIDESC");
		
		List<MbtiVO> list = jdbcTemplate.query(sql.toString(), new RowMapper<MbtiVO>() {
			
			// 얘가 MBTI VO 하나 만들어주는거래 뭐래는거임 
			@Override
			public MbtiVO mapRow(ResultSet rs, int rowNum) throws SQLException {
				MbtiVO mbti = new MbtiVO();
				mbti.setMtType(rs.getString("MT_TYPE"));
				mbti.setMtTitle(rs.getString("MT_TITLE"));
				mbti.setMtContent(rs.getString("MT_CONTENT"));
				return mbti;
			}
			
		});
		list.forEach(r->log.info("record: {}", r));
	}
	
	// 컬럼 하나만 받는애임 	
	@Test
	@Disabled
	void testJdbcTemplate() {
		StringBuffer sql = new StringBuffer();
		sql.append("SELECT MT_TYPE ");
		sql.append("FROM TB_MBTIDESC");
		
		List<String> list = jdbcTemplate.queryForList(sql.toString(), String.class);	// sql.toString을 넣어서 쿼리문 실행하고, 
		list.forEach(r->log.info("record: {}", r));
	}
	


	@Autowired
	DataSource dataSource;
	
	@Test
	void test() {
		log.info("dataSource: {}", dataSource);
		// 실행하고 끝나는 람다 구조
		assertDoesNotThrow(()->{
			try(
				Connection conn = dataSource.getConnection();
			){
				log.info("conn: {}", conn);
			}
		});
	}

}
