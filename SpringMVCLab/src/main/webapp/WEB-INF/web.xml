<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="https://jakarta.ee/xml/ns/jakartaee"
	xsi:schemaLocation="https://jakarta.ee/xml/ns/jakartaee https://jakarta.ee/xml/ns/jakartaee/web-app_6_0.xsd"
	version="6.0">
	<display-name>SpringMVCLab</display-name>
	<welcome-file-list>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>
	
	<!-- 
		상위 컨테이너 생성을 위한 설정. Modle MVC
		pom.xml에 mvc 디펜던시를 추가해줘야 동작함
	  -->
	
	<!-- AnnotationConfigWebApplicationContext - 얘가 컨테이너의 구현체  -->
	<!-- 
		ContextLoaderListener얘한테 ↓ 이런 작업 할 수 있게 설정파일 넘겨줌, 얘는 서버가 구동되자마자 바로 생성
		ConfigurableApplicationContext context 
		= new AnnotationConfigApplicationContext(Case02DependencyInjectionConfig.class);
	 -->
	<context-param>
		<param-name>contextClass</param-name>
		<param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
	</context-param>
	<!-- 얘는 설정파일 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>kr.or.ddit.conf.SpringRootContextConfig</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	
	
	<!-- 하위 컨테이너 생성을 위한 설정. Controller / View layer 등록  -->
	<!-- 
		1. 서버구동 2. 상위컨테이너가 만들어진다 3. 디스팩쳐 서블릿의 인스턴스가 생성된후 4. 하위컨테이너가 생성될때 이파일들이 동작
		Front Controller Pattern: 모든 요청을 집중에서 처리하는 전처리 컨트롤러 분리 구조
		Front Controller(DispatcherServlet): 뒤에서 하나의 오청을 전담하는 컨트롤러가 동작하게 됌 (별칭, Backend 컨트롤러, 커맨드 핸들러)
		서블릿은 기본이 레이지 로딩구조임, load on으로 이거로딩설정해줘야함
	 -->	 
	 <servlet>
	 	<servlet-name>dispatcher</servlet-name>
	 	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	 	<init-param>
	 		<param-name>contextConfigLocation</param-name>
	 		<param-value>/WEB-INF/springmvc/dispatcher-servlet.xml</param-value>
	 	</init-param>
	 	<load-on-startup>1</load-on-startup> <!-- 요청이 발생하지 않더라도 서버가 스타트되면 생성됌, 이거로딩방식으로 변경 -->
	 </servlet>
	 <servlet-mapping>
	 	<servlet-name>dispatcher</servlet-name>
	 	<!-- / : 정적 자원에 대한 매핑을 표현하는 약속된 url  -->
	 	<url-pattern>/</url-pattern>
	 </servlet-mapping>
	<!-- // end  -->
</web-app>